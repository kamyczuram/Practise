Find wineries producing wines with aromas of plum, cherry, rose, or hazelnut (singular form only). Substring matches, like cherries should be excluded.

SELECT winery DISTICNT FROM (
select winery, description 
from winemag_p1 
WHERE description LIKE '%plum%'
    OR description LIKE '%cherry%'
    OR description LIKE '%rose%'
    OR description LIKE '%hazelnut%')


Calculate each user's average session time, where a session is defined as the time difference between a page_load and a page_exit.
Assume each user has only one session per day. If there are multiple page_load or page_exit events on the same day, use only the 
latest page_load and the earliest page_exit, ensuring the page_load occurs before the page_exit. 
Output the user_id and their average session time.

WITH log_load_exit AS(
SELECT * 
FROM facebook_web_log
WHERE action IN ('page_load', 'page_exit')),

temp AS(
SELECT user_id, DATE(timestamp), MIN(timestamp), MAX(timestamp), action
FROM log_load_exit 
GROUP BY (DATE(timestamp), action, user_id))

SELECT user_id, AVG(time) AS avg_session_duration FROM (
SELECT user_id, date, MAX(min) - MIN(max) AS time 
FROM temp 
GROUP BY date, user_id
)
GROUP BY user_id


Calculate the friend acceptance rate for each date when friend requests were sent. A request is sent if action = sent and accepted if action = accepted. 
If a request is not accepted, there is no record of it being accepted in the table. 
The output will only include dates where requests were sent and at least one of them was accepted, as the acceptance rate can only be calculated for those dates. 
Show the results ordered from the earliest to the latest date.

WITH sent AS(
SELECT * FROM fb_friend_requests
WHERE action ='sent'),

accepted AS(
SELECT *
FROM fb_friend_requests
WHERE action = 'accepted'
)

SELECT date, COUNT(accepted)::FLOAT / COUNT(sent) AS percentage_acceptance 
FROM (
SELECT s.date, s.action AS sent, a.action AS accepted 
from sent AS s 
LEFT JOIN accepted AS a
ON s.user_id_sender = a.user_id_sender 
AND s.user_id_receiver = a.user_id_receiver
)
GROUP BY date


Identify returning active users by finding users who made a second purchase within 1 to 7 days after their first purchase. 
Ignore same-day purchases. Output a list of these user_ids.



WITH first_buy AS(
SELECT user_id, MIN(created_at) AS first_buy
FROM amazon_transactions 
GROUP BY user_id),

second_buy AS(
SELECT user_id, MIN(created_at) AS second_buy
FROM amazon_transactions 
WHERE (user_id, created_at) NOT IN (
SELECT * FROM first_buy)
GROUP BY user_id
)
SELECT f.user_id, f.first_buy, s.second_buy, s.second_buy - f.first_buy AS diff
FROM first_buy AS f 
JOIN second_buy AS s
ON f.user_id = s.user_id
WHERE s.second_buy - f.first_buy < 8;

