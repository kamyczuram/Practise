Find all the users who were active for 3 consecutive days or more.

WITH perv_day AS(
select 
user_id,
record_date, 
LAG(record_date) OVER (PARTITION BY user_id ORDER BY record_date) as perv_day
from sf_events),

second_day AS(
select 
user_id,
record_date, 
perv_day,
LAG(perv_day) OVER 
(PARTITION BY user_id ORDER BY record_date) as second_day
from perv_day
)

SELECT *, record_date - second_day AS diff 
FROM second_day
WHERE record_date - second_day = 2;



Find the best-selling item for each month (no need to separate months by year). 
The best-selling item is determined by the highest total sales amount, calculated as: total_paid = unitprice * quantity. 
Output the month, description of the item, and the total amount paid.


WITH calculated AS(
select EXTRACT(MONTH FROM invoicedate) AS month,
description,
unitprice * quantity AS total_paid
from online_retail),

grouped AS(
SELECT month, description, SUM(total_paid) as total_paid
FROM calculated
GROUP BY (month, description)
ORDER BY month
),

ranked AS (
SELECT month, description, total_paid,
RANK() OVER (PARTITION BY month ORDER BY total_paid DESC) as rnk
FROM grouped
)

SELECT month, description, total_paid
FROM ranked
WHERE rnk = 1;


You are given a dataset of actors and the films they have been involved in, including each film's release date and rating. 
For each actor, calculate the difference between the rating of their most recent film and their average rating across all previous films 
(the average rating excludes the most recent one).

Return a list of actors along with their average lifetime rating, the rating of their most recent film, and the difference between the two ratings.
If an actor has only one film, return 0 for the difference and their only filmâ€™s rating for both the average and latest rating fields.

WITH ranked AS(
select *, 
ROW_NUMBER() OVER(PARTITION BY actor_name ORDER BY release_date DESC) AS r_num
from actor_rating_shift
ORDER BY actor_name),

recent AS(
SELECT *
FROM ranked
WHERE r_num = 1),

average AS(
SELECT actor_name, AVG(film_rating) AS avg_rating
FROM ranked
WHERE r_num > 1
GROUP BY actor_name
)

SELECT r.actor_name, 
r.film_rating AS latest_rating,
COALESCE(a.avg_rating, r.film_rating) AS avg_rating,
r.film_rating - COALESCE(a.avg_rating, r.film_rating) AS rating_difference
FROM recent as r
LEFT JOIN average as a
ON r.actor_name = a.actor_name
ORDER BY r.actor_name;


You are given a table of tennis players and their matches that they could either win (W) or lose (L). Find the longest streak of wins.
A streak is a set of consecutive won matches of one player. The streak ends once a player loses their next match. 
Output the ID of the player or players and the length of the streak.


WITH RECURSIVE player401 AS(
select *,
LEAD(match_date) OVER(PARTITION BY player_id ORDER BY match_date) AS next_match
from players_results
),

streak AS(
SELECT player_id, match_date, match_result, next_match,
1 as streak
FROM player401
WHERE match_result = 'W'

UNION ALL
SELECT p.player_id, p.match_date, p.match_result, p.next_match,
s.streak + 1 AS streak
FROM player401 as p
JOIN streak as s ON s.next_match = p.match_date
WHERE p.match_result = 'W'
)

SELECT * FROM streak
ORDER BY player_id, match_date;



